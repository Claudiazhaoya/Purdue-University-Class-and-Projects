Terminals unused in grammar

   ASSIGN
   OTHER


Grammar

    0 $accept: goal $end

    1 goal: TOP middle eof

    2 middle: state middle
    3       | /* empty */

    4 state: WRITING LEFTPAREN docwrite RIGHTPAREN linestop
    5      | declare linestop
    6      | ID EQUAL expression linestop
    7      | NEWLINE

    8 declare: VAR ID
    9        | VAR ID EQUAL expression

   10 docwrite: expression
   11         | expression COMMA docwrite
   12         | /* empty */

   13 expression: STRING
   14           | math

   15 math: argument operator math
   16     | argument

   17 argument: NUM
   18         | ID
   19         | LEFTPAREN math RIGHTPAREN

   20 operator: PLUS
   21         | MINUS
   22         | MULTIPLICATION
   23         | DIVISON

   24 linestop: NEWLINE
   25         | SEMI

   26 eof: END
   27    | END NEWLINE


Terminals, with rules where they appear

$end (0) 0
error (256)
ASSIGN (258)
VAR (259) 8 9
ID (260) 6 8 9 18
NUM (261) 17
PLUS (262) 20
MINUS (263) 21
MULTIPLICATION (264) 22
DIVISON (265) 23
EQUAL (266) 6 9
WRITING (267) 4
STRING (268) 13
NEWLINE (269) 7 24 27
SEMI (270) 25
TOP (271) 1
END (272) 26 27
LEFTPAREN (273) 4 19
RIGHTPAREN (274) 4 19
COMMA (275) 11
OTHER (276)


Nonterminals, with rules where they appear

$accept (22)
    on left: 0
goal (23)
    on left: 1, on right: 0
middle (24)
    on left: 2 3, on right: 1 2
state (25)
    on left: 4 5 6 7, on right: 2
declare (26)
    on left: 8 9, on right: 5
docwrite (27)
    on left: 10 11 12, on right: 4 11
expression (28)
    on left: 13 14, on right: 6 9 10 11
math (29)
    on left: 15 16, on right: 14 15 19
argument (30)
    on left: 17 18 19, on right: 15 16
operator (31)
    on left: 20 21 22 23, on right: 15
linestop (32)
    on left: 24 25, on right: 4 5 6
eof (33)
    on left: 26 27, on right: 1


state 0

    0 $accept: . goal $end

    TOP  shift, and go to state 1

    goal  go to state 2


state 1

    1 goal: TOP . middle eof

    VAR      shift, and go to state 3
    ID       shift, and go to state 4
    WRITING  shift, and go to state 5
    NEWLINE  shift, and go to state 6

    $default  reduce using rule 3 (middle)

    middle   go to state 7
    state    go to state 8
    declare  go to state 9


state 2

    0 $accept: goal . $end

    $end  shift, and go to state 10


state 3

    8 declare: VAR . ID
    9        | VAR . ID EQUAL expression

    ID  shift, and go to state 11


state 4

    6 state: ID . EQUAL expression linestop

    EQUAL  shift, and go to state 12


state 5

    4 state: WRITING . LEFTPAREN docwrite RIGHTPAREN linestop

    LEFTPAREN  shift, and go to state 13


state 6

    7 state: NEWLINE .

    $default  reduce using rule 7 (state)


state 7

    1 goal: TOP middle . eof

    END  shift, and go to state 14

    eof  go to state 15


state 8

    2 middle: state . middle

    VAR      shift, and go to state 3
    ID       shift, and go to state 4
    WRITING  shift, and go to state 5
    NEWLINE  shift, and go to state 6

    $default  reduce using rule 3 (middle)

    middle   go to state 16
    state    go to state 8
    declare  go to state 9


state 9

    5 state: declare . linestop

    NEWLINE  shift, and go to state 17
    SEMI     shift, and go to state 18

    linestop  go to state 19


state 10

    0 $accept: goal $end .

    $default  accept


state 11

    8 declare: VAR ID .
    9        | VAR ID . EQUAL expression

    EQUAL  shift, and go to state 20

    $default  reduce using rule 8 (declare)


state 12

    6 state: ID EQUAL . expression linestop

    ID         shift, and go to state 21
    NUM        shift, and go to state 22
    STRING     shift, and go to state 23
    LEFTPAREN  shift, and go to state 24

    expression  go to state 25
    math        go to state 26
    argument    go to state 27


state 13

    4 state: WRITING LEFTPAREN . docwrite RIGHTPAREN linestop

    ID         shift, and go to state 21
    NUM        shift, and go to state 22
    STRING     shift, and go to state 23
    LEFTPAREN  shift, and go to state 24

    $default  reduce using rule 12 (docwrite)

    docwrite    go to state 28
    expression  go to state 29
    math        go to state 26
    argument    go to state 27


state 14

   26 eof: END .
   27    | END . NEWLINE

    NEWLINE  shift, and go to state 30

    $default  reduce using rule 26 (eof)


state 15

    1 goal: TOP middle eof .

    $default  reduce using rule 1 (goal)


state 16

    2 middle: state middle .

    $default  reduce using rule 2 (middle)


state 17

   24 linestop: NEWLINE .

    $default  reduce using rule 24 (linestop)


state 18

   25 linestop: SEMI .

    $default  reduce using rule 25 (linestop)


state 19

    5 state: declare linestop .

    $default  reduce using rule 5 (state)


state 20

    9 declare: VAR ID EQUAL . expression

    ID         shift, and go to state 21
    NUM        shift, and go to state 22
    STRING     shift, and go to state 23
    LEFTPAREN  shift, and go to state 24

    expression  go to state 31
    math        go to state 26
    argument    go to state 27


state 21

   18 argument: ID .

    $default  reduce using rule 18 (argument)


state 22

   17 argument: NUM .

    $default  reduce using rule 17 (argument)


state 23

   13 expression: STRING .

    $default  reduce using rule 13 (expression)


state 24

   19 argument: LEFTPAREN . math RIGHTPAREN

    ID         shift, and go to state 21
    NUM        shift, and go to state 22
    LEFTPAREN  shift, and go to state 24

    math      go to state 32
    argument  go to state 27


state 25

    6 state: ID EQUAL expression . linestop

    NEWLINE  shift, and go to state 17
    SEMI     shift, and go to state 18

    linestop  go to state 33


state 26

   14 expression: math .

    $default  reduce using rule 14 (expression)


state 27

   15 math: argument . operator math
   16     | argument .

    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    MULTIPLICATION  shift, and go to state 36
    DIVISON         shift, and go to state 37

    $default  reduce using rule 16 (math)

    operator  go to state 38


state 28

    4 state: WRITING LEFTPAREN docwrite . RIGHTPAREN linestop

    RIGHTPAREN  shift, and go to state 39


state 29

   10 docwrite: expression .
   11         | expression . COMMA docwrite

    COMMA  shift, and go to state 40

    $default  reduce using rule 10 (docwrite)


state 30

   27 eof: END NEWLINE .

    $default  reduce using rule 27 (eof)


state 31

    9 declare: VAR ID EQUAL expression .

    $default  reduce using rule 9 (declare)


state 32

   19 argument: LEFTPAREN math . RIGHTPAREN

    RIGHTPAREN  shift, and go to state 41


state 33

    6 state: ID EQUAL expression linestop .

    $default  reduce using rule 6 (state)


state 34

   20 operator: PLUS .

    $default  reduce using rule 20 (operator)


state 35

   21 operator: MINUS .

    $default  reduce using rule 21 (operator)


state 36

   22 operator: MULTIPLICATION .

    $default  reduce using rule 22 (operator)


state 37

   23 operator: DIVISON .

    $default  reduce using rule 23 (operator)


state 38

   15 math: argument operator . math

    ID         shift, and go to state 21
    NUM        shift, and go to state 22
    LEFTPAREN  shift, and go to state 24

    math      go to state 42
    argument  go to state 27


state 39

    4 state: WRITING LEFTPAREN docwrite RIGHTPAREN . linestop

    NEWLINE  shift, and go to state 17
    SEMI     shift, and go to state 18

    linestop  go to state 43


state 40

   11 docwrite: expression COMMA . docwrite

    ID         shift, and go to state 21
    NUM        shift, and go to state 22
    STRING     shift, and go to state 23
    LEFTPAREN  shift, and go to state 24

    $default  reduce using rule 12 (docwrite)

    docwrite    go to state 44
    expression  go to state 29
    math        go to state 26
    argument    go to state 27


state 41

   19 argument: LEFTPAREN math RIGHTPAREN .

    $default  reduce using rule 19 (argument)


state 42

   15 math: argument operator math .

    $default  reduce using rule 15 (math)


state 43

    4 state: WRITING LEFTPAREN docwrite RIGHTPAREN linestop .

    $default  reduce using rule 4 (state)


state 44

   11 docwrite: expression COMMA docwrite .

    $default  reduce using rule 11 (docwrite)
