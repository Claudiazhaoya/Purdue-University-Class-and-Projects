#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include "recmutex.h"

int recursive_mutex_init (recursive_mutex_t *mu)
{	
	mu->owner = 0;
	mu->count = 0;
	mu->wait_count = 0;

	int initcheck = pthread_mutex_init(&mu->mutex,NULL);
		if(initcheck != 0){
			return 1;
		}else{
			return 0;
		}
}

int recursive_mutex_destroy (recursive_mutex_t *mu)
{
		if((mu->count)!=0){
			int errcheck = pthread_mutex_destroy(&(mu->mutex));
			if(errcheck != 0){
				pthread_mutex_unlock(&(mu->mutex));
				return 1;
			}else{
			pthread_mutex_unlock(&(mu->mutex));
			return 0;
			}
		}
}

int recursive_mutex_lock (recursive_mutex_t *mu)
{	
	int lockcheck = pthread_mutex_lock (&(mu->mutex));
	int threadOwner = pthread_equal(mu->owner, pthread_self());
	if(threadOwner==0){
		mu->wait_count++;
		//int lockcheck = pthread_mutex_lock (&(mu->mutex));
		if(lockcheck !=0){ //lock failed
			//pthread_mutex_unlock(&(mu->mutex));
			return 1;
		}else{
			mu->count = 1;
			mu->owner = pthread_self();
			pthread_mutex_unlock(&(mu->mutex));
			return 0;
		}
	}else{
		mu->count++;
		mu->wait_count ++;
		pthread_mutex_unlock(&(mu->mutex));
		return 0;
	}
}

int recursive_mutex_unlock (recursive_mutex_t *mu)
{	
	int lockcheck = pthread_mutex_lock (&(mu->mutex));

	int threadOwner = pthread_equal(mu->owner, pthread_self());
	if(threadOwner!=0){
		if(mu->count ==0){
			mu->owner = 0;
			int errcheck = pthread_mutex_unlock(&(mu->mutex));
			if(errcheck !=0){
				return 1;
			}
			pthread_mutex_unlock(&(mu->mutex));
			return 0;
		}
		mu->count--;
		pthread_mutex_unlock(&(mu->mutex));
		return 0;
	}else{
		return 1;
	}
}
